Find the second largest element in an array.

Given an array arr, return the second largest element from an array. If the second largest element doesn't exist then return -1.
Note: The second largest element should not be equal to the first largest.

Examples:
    Input: arr = [12, 35, 1, 10, 34, 1]
    Output: 34

    Explanation: The largest element of the array is 35 and the second largest element is 34.

Examples:
    Input: arr = [10, 10]
    Output: -1

    Explanation: The largest element of the array is 10 and the second largest element does not exist..

Constraints:
    2 ≤ arr.size() ≤ 105
    1 ≤ arr[i] ≤ 105

Approaches:
  1.Naive Approach
  2.Better Approach
  3.Optimal Approach

1.Naive Aproach:
    Sort the array and return second element from last.
    Time : O(nlogn)
    Space : O(1)
    Code : 
        class Solution {
            public int getSecondLargest(int[] arr) {
                int n = arr.length;
                
                // Sort the array in non-decreasing order
                Arrays.sort(arr);
                
                // start from second last element as last element is the largest
                for (int i = n - 2; i >= 0; i--) {
                    
                    // return the first element which is not equal to the 
                    // largest element
                    if (arr[i] != arr[n - 1]) {
                        return arr[i];
                    }
                }
                
                // If no second largest element was found, return -1
                return -1;
            }
        }


2.Better Approach:
    Find the largest element in a loop and then, find second largest element in another loop.
    Time : O(2n)
    Space : O(1)
    code:
        class Solution {
            public int getSecondLargest(int[] arr) {
                int n = arr.length;
        
                int largest = -1, secondLargest = -1;
        
                // Finding the largest element
                for (int i = 0; i < n; i++) {
                    if (arr[i] > largest)
                        largest = arr[i];
                }
        
                // Finding the second largest element
                for (int i = 0; i < n; i++) {
                    
                    // Update second largest if the current element is greater
                    // than second largest and not equal to the largest
                    if (arr[i] > secondLargest && arr[i] != largest) {
                        secondLargest = arr[i];
                    }
                }
                return secondLargest;
            }
        }


3.Optimal Approach:
    Find both first and second largest in a single loop by finding firstlargest and secondlargest parallely.
    Time : O(n)
    Space : O(1)
    code : 
        class Solution {
            public int getSecondLargest(int[] arr) {
                int n = arr.length;
        
                int largest = -1, secondLargest = -1;
        
                // finding the second largest element
                for (int i = 0; i < n; i++) {
        
                    // If arr[i] > largest, update second largest with
                    // largest and largest with arr[i]
                    if(arr[i] > largest) {
                        secondLargest = largest;
                        largest = arr[i];
                    }
                  
                    // If arr[i] < largest and arr[i] > second largest, 
                    // update second largest with arr[i]
                    else if(arr[i] < largest && arr[i] > secondLargest) {
                        secondLargest = arr[i];
                    }
                }
                return secondLargest;
            }
        }        
