You are given an array arr of positive integers. Your task is to find all the leaders in the array. 
An element is considered a leader if it is greater than or equal to all elements to its right. The rightmost element is always a leader.

Examples:
      Input: arr = [16, 17, 4, 3, 5, 2]
      Output: [17, 5, 2]
      Explanation: Note that there is nothing greater on the right side of 17, 5 and, 2.

      Input: arr = [10, 4, 2, 4, 1]
      Output: [10, 4, 4, 1]
      Explanation: Note that both of the 4s are in output, as to be a leader an equal element is also allowed on the right. side

      Input: arr = [5, 10, 20, 40]
      Output: [40]
      Explanation: When an array is sorted in increasing order, only the rightmost element is leader.

      Input: arr = [30, 10, 10, 5]
      Output: [30, 10, 10, 5]
      Explanation: When an array is sorted in non-increasing order, all elements are leaders.

Constraints:
    1 <= arr.size() <= 106
    0 <= arr[i] <= 106

Approaches:
    1.Naive
    2.Optimal

1.Nave Approach:
      Use two loops. The outer loop runs from 0 to size â€“ 1 and one by one pick all elements from left to right. 
      The inner loop compares the picked element to all the elements on its right side. 
      If the picked element is greater than all the elements to its right side, then the picked element is the leader. 

      Time : O(n^2)
      Space : O(1) 
      code :
        class Solution {
            static ArrayList<Integer> leaders(int arr[]) {
                ArrayList<Integer> result = new ArrayList<>();
                int n = arr.length;
                
                for (int i = 0; i < n; i++) {
                    int j;
                  
                    // Check elements to the right
                    for (j = i + 1; j < n; j++) {
                      
                        // If a larger element is found
                        if (arr[i] < arr[j])
                            break;
                    }
                    
                    // If no larger element was found
                    if (j == n)
                        result.add(arr[i]);
                }
                
                return result;
            }
        }


2.Optimal Approach:
    The idea is to scan all the elements from right to left in an array and keep track of the maximum till now. 
    When the maximum changes its value, add it to the result. Finally reverse the result 

    Time : O(n)
    Space : O(1)
    code :
      class Solution {
          static ArrayList<Integer> leaders(int arr[]) {
              // code here
              int n = arr.length;
              int max = -1;
              ArrayList<Integer> ans = new ArrayList<>();
              for(int i = n-1;i >= 0;i--) {
                  if(arr[i] >= max) {
                      max = arr[i];
                      ans.add(0,max);
                  }
              }
              return ans;
          }
      }
