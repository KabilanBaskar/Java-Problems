Given an array arr[], check whether it is sorted in non-decreasing order. Return true if it is sorted otherwise false.

Examples:
    Input: arr[] = [10, 20, 30, 40, 50]
    Output: true
    Explanation: The given array is sorted.

    Input: arr[] = [90, 80, 100, 70, 40, 30]
    Output: false
    Explanation: The given array is not sorted.

Constraints:
    1 ≤ arr.size ≤ 106
    - 109 ≤ arr[i] ≤ 109

Approaches:
    1.Iterative
    2.Reursive

1. Iterative Approach:
    The idea is pretty much the same. The benefit of the iterative approach is it avoids the usage of recursion stack space and recursion overhead . 
    Logic is to iterate over the whole array and in every iteration check whether arr[i] > arr[i-1] or not .

    Time : O(n)
    Space : O(!)
    Code :
      class Solution {
          public boolean arraySortedOrNot(int[] arr) {
              // Array has one or no element
              if (n == 0 || n == 1)
                  return true;
      
              for (int i = 1; i < n; i++)
      
                  // Unsorted pair found
                  if (arr[i - 1] > arr[i])
                      return false;
      
              // No unsorted pair found
              return true;
          }
      }


2. Recursive Approach:
    If size of array is zero or one, return true.
    Check last two elements of array, if they are sorted, perform a recursive call with n-1 else, return false.

    Time : O(n)
    Space : O(n)
    Code :
      class Solution {
          public boolean arraySortedOrNot(int[] arr) {
              // code here
              int n = arr.length;
              return rec(arr, n);
          }
          public boolean rec(int[] arr, int n) {
              if(n <= 1) {
                  return true;
              }
              return arr[n-1] >= arr[n-2] && rec(arr, n-1);
          } 
      }
