 The array elements are shifted towards the right. 

right-rotation:
    [1,2,3,4,5,6,7,8,9,10]
            |
    [10,1,2,3,4,5,6,7,8,9]
            |
    [9,10,1,2,3,4,5,6,7,8]

Approaches:
    1. Rotate one by one
    2. Using Temporary Array
    3. Juggling Algorithm
    4. The Reversal Algorithm

1.Rotate One By One Approach:
    At each iteration, shift the elements by one position to the right in a circular fashion (the last element becomes the first). 
    Perform this operation d times to rotate the elements to the right by d positions.

    Time : O(n^2)
    Space : O(1)
    Code :
      class solution {
          public void rotatearray(int[] arr, int d) {
              int n = arr.length;
              for(int i = 0; i < d; i++) {
                int last = arr[n-i-1];
                for(int j = 1; j < n; j++) {
                  arr[i] = arr[i-1];
                }
                arr[0] = last;
              }
          }
      }

2.Using Temperory Array Approach:
    The idea is to use a temporary array of size n, where n is the length of the original array. 
    If we right rotate the array by d positions, the last d elements will be in the beginning and the first (n – d) elements will be at the end. 
    
    Copy the last d elements of the original array into the first d positions of the temporary array
    Then copy the first n – d elements of the original array to the end of temporary array. 
    Finally, copy all the elements of temporary array back into the original array.

    Time : O(3*n)
    Space : O(n)
    code : 
      class solution {
          public void rotatearray(int[] arr, int d) {
              int n = arr.length;
              d %= n;
              int[] temp = new int[n];
              for(int i = 0;i < d; i++) {
                  temp[i] = arr[n-d-i];
              }
              for(int i = 0;i < n-d; i++) {
                  temp[i+d] = arr[i];
              }
              for(int i = 0; i < n; i++) {
                  arr[i] = temp[i];
              }
          }
      }

3.Juggling Algorithm:
    The idea behind Juggling Algorithm is that instead of moving one by one, we can use the concept of cycles. 
    Each cycle is independent and represents a group of elements that will shift among themselves during the rotation. 
    If the starting index of a cycle is i, then the next elements will be present at indices (i + d) % n, (i + 2d) % n, (i + 3d) % n … and so on till we reach back to index i. 
    
    So for any index i, we know that element at index i will move to index (i + d) % n. Now, we can simply rotate all elements in the same cycle without interfering with any other cycle. 

    Time : O(2*n)
    Space : O(1)
    code :
        class solution {
            public void rotatearray(int[] arr, int d) {
              int n = arr.length;
              int cycle = gcd(n, d);
              for(int i = 0; i < cycle; i++) {
                int curridx = i;
                int currele = arr[curridx];
                do {
                  int nextidx = (curridx + d)%n;
                  int nextele = arr[nextidx];
                  arr[nextidx] = currele;
                  curridx = nextidx;
                  currele = nextele;
                } while(curridx != i);
              }  
            }
            public int gcd(int a, int b) {
              if(b == 0) {
                return a;
              }
              return gcd(b, a%b);
              }
        }


4.Reversel Algorithm:
    The idea is based on the observation that if we right rotate the array by d positions, 
    the last d elements will be in the front and first (n – d) elements will be at the end. 
    
    First reverse all the elements of the array. 
    Then reverse first d elements.
    Finally, reverse last (n – d) elements to get the final rotated array.

    Time : O(3*n)
    Space : O(n)
    code :
        class solution {
            // Function to rotate an array by d elements to the right
            static void rotateArr(int[] arr, int d) {
                int n = arr.length;
                // Handle the case where d > size of array
                d %= n;
                // Reverse the entire array
                reverse(arr, 0, n - 1);
                // Reverse the first d elements
                reverse(arr, 0, d - 1);
                // Reverse the remaining n-d elements
                reverse(arr, d, n - 1);
            }
            // function to reverse a portion of the array
            static void reverse(int[] arr, int start, int end) {
                while (start < end) {
                    int temp = arr[start];
                    arr[start] = arr[end];
                    arr[end] = temp;
                    start++;
                    end--;
                }
            }
        }
